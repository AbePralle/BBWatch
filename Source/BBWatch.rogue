#===============================================================================
# BBWatch.rogue
# May 28, 2020
#===============================================================================
$define VERSION_INFO "BBWatch v0.1 / May 29, 2020"

$requireRogue "1.7.3"

$include "Dependencies.rogue"
$include "TempFile.rogue"

if (System.is_macos)
  Dependencies.configure
  BBWatch( System.command_line_arguments.cloned )
else
  Console.error.println "BBWatch only supports macOS"
endIf

class BBWatch
  METHODS
    method init( args:String[] )
      local files = String[]
      local update_mode = false
      forEach (arg in rewriter=args.rewriter)
        if (arg == "--update")
          update_mode = true
        elseIf (update_mode)
          update( arg )
        elseIf (File.exists(arg) and not File.is_folder(arg))
          files.add( File.absolute_filepath(arg) )
        else
          local listing = File.listing( arg, &ignore_hidden )
          if (listing.count)
            files.add( File.absolute_filepath(forEach in listing) )
          else
            files.add( File.absolute_filepath(arg) )
          endIf
        endIf
      endForEach

      if (files.is_empty)
        if (not update_mode) print_usage
        return
      endIf

      println "Press CTRL+C to cancel BBWatch"
      println

      forEach (filepath in files)
        update( filepath )
      endForEach

      local escaped_files = files.map<<String>>( (filepath) => File.shell_escaped(filepath) )
      local cmd = ''printf "$\\n" | entr -p bbwatch --update /_'' (escaped_files.join("\\n"))
      Process( cmd, &env )

    method print_usage
      println VERSION_INFO
      println
      println @|USAGE
               |  bbwatch <wildcard-filepaths>
               |
               |OPTIONS
               |  <wildcard-filepath>
               |    Put patterns in quotes to ensure that BBWatch's non-standard wildcard patterns
               |    are correctly processed. By example:
               |      "*.js"     # matches files in the current folder ending with ".js"
               |      "**/*.js"  # matches files in subfolders but not in the current folder
               |      "***/*.js" # matches files in subfolders or in the current folder.
               |    Finally, '?' can be used to match any single character.
               |
               |DESCRIPTION
               |  Whenever any listed filepaths have changed, BBWatch uses AppleScript to copy
               |  and paste the content of the file into the active Buildbox JavaScript editor
               |  IF the Buildbox editor contains the same first line as a given file. Use a
               |  unique header comment to ensure that the correct JavaScript is updated.
               |
               |  If a given filename does not exist, BBWatch will copy the current Buildbox
               |  JavaScript content to the file before starting to watch the file.
               |
               |  Press CTRL+C to cancel BBWatch.

    method bolded( text:String )->String
      return "$$$" (ConsoleStyle().bold,text,ConsoleStyle().bold_off)

    method print_word_wrapped( text:String )
      println text.word_wrapped( 80 )

    method update( filepath:String )
      local old_content = get_bb_js_content
      if (not old_content)
        println "$  Synching $ <> Buildbox" (Timestamp(System.time),filepath)
        println "=" * 80
        println "ERROR: cannot find any currently-displayed JavaScript content in Buildbox."
        println "=" * 80
        return
      endIf
      if (old_content.begins_with("function init"))
        println "$  Synching $ <> Buildbox" (Timestamp(System.time),filepath)
        local message = "ERROR: existing Buildbox JavaScript has no uniquely identifying first line. " ...
                        "Please add the same unique comment to the the first line of the Buildbox JavaScript " ...
                        "as well as the first line of $." (bolded(filepath))
        println "=" * 80
        print_word_wrapped( message )
        println "=" * 80
        return
      endIf

      if (not File.exists(filepath))
        print_word_wrapped( "$ does not yet exist." (bolded(filepath)) )
        println "$  Synching Buildbox -> $" (Timestamp(System.time),filepath)
        File.save( filepath, old_content )
        return
      endIf

      local new_content = File.load_as_string( filepath )

      if (old_content.before_first('\n').trimmed != new_content.before_first('\n').trimmed)
        println "$  Synching $ -> Buildbox" (Timestamp(System.time),filepath)
        local message = "ERROR: the first line of the Buildbox JavaScript content does not match the first line " ...
                        "of $. BBWatch will only synch content to Buildbox if the first lines match." ...
                        (bolded(filepath))
        println "=" * 80
        print_word_wrapped( message )
        println "=" * 80
        return
      endIf

      println "$  Synching $ -> Buildbox" (Timestamp(System.time),filepath)
      set_bb_js_content( new_content )

    method get_bb_js_content->String
      # No luck trying to read AppleScript results from a Process, so move data through temporary files.
      use temp_file = TempFile( "bbwatch" )

        local process = Process( "osascript", &writable )

        local script = @|tell application "System Events"
                        |  set js_area to first text area of splitter group 2 of group 2 of window "Default" of application process "Buildbox"
                        |  set js_content to value of js_area as text
                        |  set outfile to open for access POSIX file "$TMPFILE" with write permission
                        |  write js_content to outfile as «class utf8»
                        |  close access outfile
                        |end tell

        script = script.replacing( "$TMPFILE", temp_file.filepath )
        local writer = PrintWriter( process.input_writer )
        writer.println script
        process.finish
        local result = ProcessResult( process.exit_code, process.output_bytes, process.error_bytes )
        if (not result.success) return null
        return temp_file.load_as_string
      endUse

    method set_bb_js_content( new_content:String )
      use temp_file = TempFile( "bbwatch" )
        temp_file.save( new_content )

        local process = Process( "osascript", &writable )

        local script = @|tell application "System Events"
                        |  set infile to ("$TMPFILE")
                        |  open for access POSIX file infile
                        |  set file_content to (read (infile as «class utf8»))
                        |  set js_area to first text area of splitter group 2 of group 2 of window "Default" of application process "Buildbox"
                        |  set value of js_area to file_content
                        |end tell

        script = script.replacing( "$TMPFILE", temp_file.filepath )
        local writer = PrintWriter( process.input_writer )
        writer.println script
        process.finish

        local result = ProcessResult( process.exit_code, process.output_bytes, process.error_bytes )
        if (not result.success)
          println "ERROR synching content."
        endIf
      endUse

endClass

